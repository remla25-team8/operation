replicaCount: 1

appImage:
  repository: ghcr.io/remla25-team8/app
  tag: "1.1.5"
  pullPolicy: IfNotPresent

# Configuration for v2 app deployment
appImageV2:
  repository: ghcr.io/remla25-team8/app
  tag: "2.0.2"
  pullPolicy: IfNotPresent

modelImage:
  repository: ghcr.io/remla25-team8/model-service
  tag: "1.0.0"
  pullPolicy: IfNotPresent

# V2 Model Service configuration
modelImageV2:
  repository: ghcr.io/remla25-team8/model-service
  tag: "1.0.0"  # TODO: change to v2 version
  pullPolicy: IfNotPresent

namePrefix: ""

serviceAccount:
  create: true
  name: ""

service:
  name: app-service
  port: 8080
  targetPort: 8080
  type: ClusterIP

modelService:
  name: model-service
  port: 5000
  targetPort: 5000
  type: ClusterIP  # Internal only - not exposed externally

ingress:
  enabled: false
  host: ""
  path: /
  className: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # Other annotations as needed

# Metrics configuration
metrics:
  serviceMonitor:
    enabled: true
    interval: 15s
    scrapeTimeout: 10s
    additionalLabels:
      release: prometheus  # This is important for Prometheus Operator to discover the ServiceMonitor

# PrometheusRules configuration
prometheusRules:
  enabled: true
  additionalLabels:
    release: prometheus  # Match the release name used for Prometheus Operator

# Monitoring thresholds and configuration
monitoring:
  responseTime:
    thresholds:
      warning: "2.0"    # Warning threshold in seconds for P90 response time
      critical: "5.0"   # Critical threshold in seconds for P90 response time
    shadowDegradationThreshold: "0.5"  # 50% degradation threshold for shadow vs normal
  requestRate:
    minThreshold: "0.1"  # Minimum expected requests per second

# AlertManager configuration for email alerts
alertmanager:
  enabled: true
  config:
    global:
      smtp_smarthost: 'smtp.example.com:587'
      smtp_from: 'alertmanager@example.com'
      smtp_auth_username: 'alertmanager'
      smtp_auth_password: '{{ .Values.secret.smtpPassword }}'
      smtp_require_tls: true
    route:
      group_by: ['alertname', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: 'email-notifications'
      routes:
      - match:
          severity: warning
        receiver: 'email-notifications'
    receivers:
    - name: 'email-notifications'
      email_configs:
      - to: 'alerts@example.com'
        send_resolved: true

# Prometheus ingress configuration
prometheus:
  ingress:
    enabled: true
    className: nginx
    host: prometheus.local  # You can modify this to any domain you want
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"

# Grafana configuration
grafana:
  namespace: monitoring  # namespace where Grafana is deployed
  dashboards:
    enabled: true
    additionalLabels:
      grafana_dashboard: "1"
      release: prometheus
    annotations:
      k8s-sidecar-target-directory: "/tmp/dashboards/restaurant-sentiment"
  ingress:
    enabled: true
    host: grafana.myapp.local
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"




configMap:
  modelServiceUrl: http://model-service:5000

secret:
  smtpPassword: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

  
istio:
       enabled: true
       host: app.local
       sticky:
         userId: test-user

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 200m
  #   memory: 256Mi

# Shadow Launch Configuration (Traffic Mirroring for Testing)
shadowLaunch:
  enabled: false  # Set to true to enable shadow testing
  mirrorPercentage: 100.0  # Percentage of traffic to mirror (0-100)
  image:
    repository: ghcr.io/remla25-team8/model-service
    tag: "1.0.0"  #TODO: change to shadow version
    pullPolicy: IfNotPresent