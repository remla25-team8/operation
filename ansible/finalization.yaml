---
# This playbook will run after all nodes have been configured.
# And the Kubernetes cluster has been initialized.

- hosts: all
  become: true
  vars:
    kubeconfig: /etc/kubernetes/admin.conf
  tasks:
    # Install required Python packages for kubernetes.core.k8s module
    - name: Install python3-kubernetes package
      apt:
        name: python3-kubernetes
        state: present
        update_cache: yes
      become: true
      become_user: root

    # Step 20: Install MetalLB using Helm
    - name: Add MetalLB Helm repository
      kubernetes.core.helm_repository:
        name: metallb
        repo_url: https://metallb.github.io/metallb
        kubeconfig: "{{ kubeconfig }}"

    - name: Install MetalLB using Helm
      kubernetes.core.helm:
        name: metallb
        chart_ref: metallb/metallb
        release_namespace: metallb-system
        create_namespace: true
        kubeconfig: "{{ kubeconfig }}"
        chart_version: "0.14.9"

    - name: Wait for MetalLB controller to be ready
      shell: kubectl --kubeconfig={{ kubeconfig }} wait -n metallb-system -l app.kubernetes.io/name=metallb,app.kubernetes.io/component=controller --for=condition=ready pod --timeout=60s
      changed_when: false

    - name: Create MetalLB IP address pool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: first-pool
            namespace: metallb-system
          spec:
            addresses:
              - 192.168.56.90-192.168.56.99
        kubeconfig: "{{ kubeconfig }}"

    - name: Create MetalLB L2 advertisement
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: example
            namespace: metallb-system
          spec:
            ipAddressPools:
              - first-pool
        kubeconfig: "{{ kubeconfig }}"

    # Step 21: Install Nginx Ingress Controller
    - name: Add Nginx Ingress Helm repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx
        kubeconfig: "{{ kubeconfig }}"  

    - name: Install Nginx Ingress Controller
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: true
        kubeconfig: "{{ kubeconfig }}" 
        values:
          controller:
            service:
              loadBalancerIP: 192.168.56.90

    - name: Wait for Nginx Ingress Controller to be ready
      shell: kubectl --kubeconfig={{ kubeconfig }} wait -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx,app.kubernetes.io/component=controller --for=condition=ready pod --timeout=120s
      changed_when: false

    # Step 22: Install Kubernetes Dashboard
    - name: Add Kubernetes Dashboard Helm repository
      kubernetes.core.helm_repository:
        name: kubernetes-dashboard
        repo_url: https://kubernetes.github.io/dashboard
        kubeconfig: "{{ kubeconfig }}"  

    - name: Create kubernetes-dashboard namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: kubernetes-dashboard
        kubeconfig: "{{ kubeconfig }}"

    - name: Create Kong configuration ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: kong-config
            namespace: kubernetes-dashboard
          data:
            KONG_SSL: "on"
            KONG_SSL_CERT: "/etc/secrets/tls.crt"
            KONG_SSL_CERT_KEY: "/etc/secrets/tls.key"
        kubeconfig: "{{ kubeconfig }}"

    - name: Install Kubernetes Dashboard with Kong configuration
      kubernetes.core.helm:
        name: kubernetes-dashboard
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        release_namespace: kubernetes-dashboard
        create_namespace: false
        kubeconfig: "{{ kubeconfig }}"
        values:
          kong:
            enabled: true
            env:
              KONG_SSL: "on"
              KONG_SSL_CERT: "/etc/secrets/tls.crt"
              KONG_SSL_CERT_KEY: "/etc/secrets/tls.key"
            service:
              type: LoadBalancer
              ports:
                kong-proxy-tls:
                  port: 443
                  targetPort: 8443
                  protocol: TCP

    - name: Create admin user for Dashboard
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: kubernetes-dashboard
        kubeconfig: "{{ kubeconfig }}"

    - name: Create cluster role binding for admin user
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: admin-user
            namespace: kubernetes-dashboard
        kubeconfig: "{{ kubeconfig }}"

    - name: Create Ingress for Kubernetes Dashboard
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kubernetes-dashboard
            namespace: kubernetes-dashboard
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - dashboard.local
            rules:
            - host: dashboard.local
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: kubernetes-dashboard-kong-proxy
                      port:
                        number: 443
        kubeconfig: "{{ kubeconfig }}"

    - name: Wait for Kong proxy to be ready
      shell: kubectl --kubeconfig={{ kubeconfig }} wait -n kubernetes-dashboard -l app.kubernetes.io/name=kong --for=condition=ready pod --timeout=120s
      changed_when: false

    - name: Instructions to access Dashboard
      debug:
        msg:
          - "Dashboard has been deployed. To access it:"
          - "1. Add 'dashboard.local' to your hosts file pointing to 192.168.56.90"
          - "2. Run this command to get a login token: kubectl -n kubernetes-dashboard create token admin-user"
          - "3. Access the dashboard at https://dashboard.local (note: using HTTPS)"
          - "4. You may need to accept the self-signed certificate warning in your browser"

    # Step 23: Install Istio using Helm
    - name: Add Istio Helm repository
      kubernetes.core.helm_repository:
        name: istio
        repo_url: https://istio-release.storage.googleapis.com/charts
        kubeconfig: "{{ kubeconfig }}"

    - name: Create istio-system namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: istio-system
        kubeconfig: "{{ kubeconfig }}"

    - name: Install Istio base chart (CRDs)
      kubernetes.core.helm:
        name: istio-base
        chart_ref: istio/base
        release_namespace: istio-system
        create_namespace: false
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        chart_version: "1.25.2"

    - name: Install Istio istiod (control plane)
      kubernetes.core.helm:
        name: istiod
        chart_ref: istio/istiod
        release_namespace: istio-system
        create_namespace: false
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        chart_version: "1.25.2"

    - name: Create istio-ingress namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: istio-ingress
        kubeconfig: "{{ kubeconfig }}"

    - name: Install Istio ingress gateway
      kubernetes.core.helm:
        name: istio-ingress
        chart_ref: istio/gateway
        release_namespace: istio-ingress
        create_namespace: false
        kubeconfig: "{{ kubeconfig }}"
        wait: true
        chart_version: "1.25.2"

    - name: Wait for Istio components to be ready
      shell: kubectl --kubeconfig={{ kubeconfig }} wait --for=condition=ready pod -l app=istiod -n istio-system --timeout=120s
      changed_when: false

    - name: Enable Istio sidecar injection for default namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: default
            labels:
              istio-injection: enabled
        kubeconfig: "{{ kubeconfig }}"

    # Configure Istio Gateway with fixed IP and HTTPS support
    - name: Configure Istio Gateway with fixed IP
      shell: |
        SVC_NAME=$(kubectl --kubeconfig={{ kubeconfig }} get svc -n istio-ingress --no-headers -o custom-columns=":metadata.name" | head -1)
        if [ -n "$SVC_NAME" ]; then
          kubectl --kubeconfig={{ kubeconfig }} patch svc $SVC_NAME -n istio-ingress -p '{"spec":{"loadBalancerIP":"192.168.56.91"}}'
          echo "Patched service: $SVC_NAME"
        else
          echo "No service found in istio-ingress namespace"
        fi
      register: istio_patch_result
      changed_when: true

    - name: Generate TLS certificate for Istio HTTPS
      shell: |
        mkdir -p /tmp/istio-certs
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout /tmp/istio-certs/tls.key \
          -out /tmp/istio-certs/tls.crt \
          -subj "/CN=*.local/O=istio-gateway/C=NL"
      args:
        creates: /tmp/istio-certs/tls.crt

    - name: Create TLS secret for Istio Gateway
      shell: |
        kubectl --kubeconfig={{ kubeconfig }} create secret tls istio-gateway-tls \
          --cert=/tmp/istio-certs/tls.crt \
          --key=/tmp/istio-certs/tls.key \
          -n istio-ingress \
          --dry-run=client -o yaml | kubectl --kubeconfig={{ kubeconfig }} apply -f -
      changed_when: true

    - name: Create Istio HTTPS Gateway with correct selector
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.istio.io/v1alpha3
          kind: Gateway
          metadata:
            name: https-gateway
            namespace: istio-ingress
          spec:
            selector:
              istio: ingress  # FIXED: Correct selector
            servers:
            - port:
                number: 443
                name: https
                protocol: HTTPS
              tls:
                mode: SIMPLE
                credentialName: istio-gateway-tls
              hosts:
              - "*"
            - port:
                number: 80
                name: http
                protocol: HTTP
              hosts:
              - "*"
        kubeconfig: "{{ kubeconfig }}"

    - name: Remove duplicate Istio service if exists
      shell: |
        if kubectl --kubeconfig={{ kubeconfig }} get svc istio-ingressgateway -n istio-ingress >/dev/null 2>&1; then
          kubectl --kubeconfig={{ kubeconfig }} delete svc istio-ingressgateway -n istio-ingress
          echo "Removed duplicate istio-ingressgateway service"
        else
          echo "No duplicate service found"
        fi
      register: cleanup_result
      changed_when: "'Removed duplicate' in cleanup_result.stdout"

    - name: Final Istio configuration status
      debug:
        msg:
          - "Istio Gateway configured successfully"
          - "HTTP/HTTPS IP: 192.168.56.91"
          - "Certificate: Self-signed for *.local domains"
          - "Gateway: https-gateway in istio-ingress namespace"
          - "Cleanup: {{ cleanup_result.stdout }}"

    - name: Create monitoring namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: monitoring
        kubeconfig: "{{ kubeconfig }}"

    - name: Add Prometheus Helm repo
      kubernetes.core.helm_repository:
        name: prometheus-community
        repo_url: https://prometheus-community.github.io/helm-charts
      register: helm_repo_result
      retries: 3
      delay: 10
      until: helm_repo_result is success
      changed_when: helm_repo_result is success
      failed_when: helm_repo_result is failed

    - name: Install Prometheus Stack
      kubernetes.core.helm:
        name: prometheus
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: monitoring
        create_namespace: false
        kubeconfig: "{{ kubeconfig }}"
        wait: true

    - name: Wait for Prometheus components to be ready
      shell: kubectl --kubeconfig={{ kubeconfig }} wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=180s
      changed_when: false

    - name: Instructions for Prometheus
      debug:
        msg:
          - "Prometheus has been deployed using Helm in the monitoring namespace"
          - "The kube-prometheus-stack includes Prometheus, Alertmanager, and Grafana"
          - "ServiceMonitor CRDs are now available for monitoring services"

