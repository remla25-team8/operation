---
- hosts: all
  become: true
  tasks:
    - name: Get hostname
      command: hostname
      register: hostname_result
      changed_when: false # Rende il task idempotente

    - name: Display hostname
      debug:
        msg: "Current hostname is: {{ hostname_result.stdout }}"

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install common packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present

    - name: Generate Ansible inventory file # from templates/inventory.cfg.j2
      template:
        src: inventory.cfg.j2
        dest: /home/vagrant/inventory.cfg
        owner: vagrant
        group: vagrant
        mode: "0644"
      when: inventory_hostname == groups['controller'][0]

    # Step 8 (to complete and test)
    - name: Configure /etc/hosts file # from templates/hosts.j2
      template:
        src: hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"

    # Step 4: Register SSH Keys
    - name: Ensure .ssh directory exists
      file:
        path: /home/vagrant/.ssh
        state: directory
        owner: vagrant
        group: vagrant
        mode: "0700"

    - name: Add SSH public keys
      authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', item) }}"
      with_items:
        - "files/ssh_keys/lorenzo.pub"
        - "files/ssh_keys/yongcheng.pub"
        # Add your public ssh keys (at least two)

    # Includes specific playbook for worker
    - name: Include worker specific tasks
      include_tasks: node.yaml
      when: inventory_hostname in groups['worker']

    # Step 5: Disable SWAP
    - name: Disable SWAP for current session
      ansible.builtin.shell:
        cmd: swapoff -a
      changed_when: false
      failed_when: false

    - name: Remove SWAP entry from /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^[^#].*\sswap\s'
        state: absent

    - name: Create k8s.conf for module loading
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'
      register: k8s_conf

    - name: Load br_netfilter module
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present
      when: k8s_conf.changed

    - name: Enable IPv4 forwarding and bridge filtering
      ansible.builtin.sysctl:
        name: "{{ item }}"
        value: '1'
        state: present
        sysctl_set: yes
        reload: yes
      loop:
        - net.ipv4.ip_forward
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
    
    - name: Manage /etc/hosts file
      ansible.builtin.template:
        src: templates/hosts.j2
        dest: /etc/hosts
        mode: '0644'

    - name: Add Kubernetes apt key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        state: present
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
        state: present
        filename: kubernetes
        update_cache: yes

    - name: Install containerd, runc, and Kubernetes tools
      ansible.builtin.apt:
        name:
          - containerd=1.7.24-*
          - runc=1.1.12-*
          - kubeadm=1.32.4-*
          - kubelet=1.32.4-*
          - kubectl=1.32.4-*
        state: present
        update_cache: yes
        cache_valid_time: 3600

    - name: Hold Kubernetes packages to prevent upgrades
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubeadm
        - kubelet
        - kubectl
        - containerd
        - runc

    - name: Ensure /etc/containerd directory exists
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration
      ansible.builtin.shell:
        cmd: containerd config default > /etc/containerd/config.toml
        creates: /etc/containerd/config.toml
      register: config_generated

    - name: Configure containerd - disable AppArmor
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*disable_apparmor\s*=\s*).*$'
        line: '\1true'
        backrefs: yes
      when: config_generated.changed or config_generated.skipped is not defined

    - name: Configure containerd - set sandbox image
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*sandbox_image\s*=\s*).*$'
        line: '\1"registry.k8s.io/pause:3.10"'
        backrefs: yes
      when: config_generated.changed or config_generated.skipped is not defined

    - name: Configure containerd - enable SystemdCgroup
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*SystemdCgroup\s*=\s*).*$'
        line: '\1true'
        backrefs: yes
      when: config_generated.changed or config_generated.skipped is not defined

    - name: Restart containerd service
      ansible.builtin.service:
        name: containerd
        state: restarted
        enabled: yes
      when: config_generated.changed or config_generated.skipped is not defined

    - name: Ensure kubelet service.d directory exists
      ansible.builtin.file:
        path: /etc/systemd/system/kubelet.service.d
        state: directory
        mode: '0755'

    - name: Ensure kubelet environment file exists
      ansible.builtin.copy:
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        content: |
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          Environment="KUBELET_KUBEADM_ARGS=--network-plugin=cni --pod-infra-container-image=registry.k8s.io/pause:3.10"
        mode: '0644'
      register: kubelet_env

    - name: Reload systemd daemon after kubelet env update
      ansible.builtin.systemd:
        daemon_reload: yes
      when: kubelet_env.changed

    - name: Enable and start kubelet service
      ansible.builtin.service:
        name: kubelet
        state: started
        enabled: yes