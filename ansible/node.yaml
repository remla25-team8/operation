# ---
# # This playbook contains specific tasks for worker nodes.
# # It will be executed only on worker nodes as part of the playbook general.yaml

# - name: Placeholder for worker node specific tasks
#   debug:
#     msg: "Worker node specific provisioning will be configured in later steps"

---
- name: Configure Kubernetes worker nodes
  hosts: worker
  gather_facts: yes
  become: true
  tasks:

    # Add this before the "Check if node is already part of the cluster" task
    - name: Check API server connectivity
      ansible.builtin.shell:
        cmd: curl -k https://192.168.56.100:6443/healthz
      register: api_health_check
      failed_when: api_health_check.stdout != "ok"
      changed_when: false
      retries: 3
      delay: 5
      until: api_health_check.stdout == "ok"

    - name: Display API server health status
      ansible.builtin.debug:
        msg: "API server health check: {{ api_health_check.stdout }}"
      when: api_health_check is defined

    # Step 18 - Check if the node is already part of the cluster
    - name: Check if node is already part of the cluster
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_config_exists

    #Step 18 - Generate the join command
    - name: Generate Kubernetes join command on controller
      command: kubeadm token create --print-join-command
      delegate_to: "{{ groups['controller'][0] }}"
      register: join_cmd
      when: not kubelet_config_exists.stat.exists

    # Step 19 - Join the worker node to the cluster
    - name: Join the Kubernetes cluster
      ansible.builtin.shell:
        cmd: "{{ join_cmd.stdout }} -v=5"
      register: join_result
      become: true
      when: not kubelet_config_exists.stat.exists
      async: 60
      poll: 5

    - name: Display join output
      ansible.builtin.debug:
        var: join_result.stdout_lines
      when: join_result is defined
